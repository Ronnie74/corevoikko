#!/usr/bin/env python2.4
# -*- coding: utf-8 -*-

# Copyright 2006 Harri Pitk채nen (hatapitk@iki.fi)
# Converts files from the database format
# of Joukahainen to Suomi-Malaga lexicon format.
# This program requires Python version 2.4 or newer.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import sys
import locale
import codecs
import re
import hfconv
import hfutils
import _pg

outputfile = codecs.open("/tmp/sanat.malaga", "w", "UTF-8")

def find_malaga_noun_class(word, hf_class):
	classparts = hf_class.split(u'-')
	if len(classparts) == 1:
		classparts.append(None)
		gradtypes = [ None ]
	else:
		gradtypes = []
		for grad in hfconv.grads:
			if grad[2] == classparts[1]: gradtypes.append(grad[1])
	
	for infclass in hfconv.classmap:
		if infclass[0] != classparts[0]: continue
		for subclass in infclass[2]:
			if not subclass[0] in gradtypes: continue
			alku = hfconv.match_re(word, subclass[1])
			if alku != None: return (alku, subclass[2])
	
	return (None, None)

def get_class_and_flags(db, hf_wclass, wid):
	flags = db.query('SELECT aid FROM flag_attribute_value WHERE wid = %i' % wid)
	flag_s = u''
	if hf_wclass == 1: class_s = u'nimisana'
	elif hf_wclass == 2: class_s = u'laatusana'
	for flag in flags.getresult():
		if hf_wclass == 2 and flag[0] == 10: class_s = u'nimi_laatusana'
		elif hf_wclass == 1 and flag[0] == 11: class_s = u'etunimi'
		elif hf_wclass == 1 and flag[0] == 12: class_s = u'sukunimi'
		elif hf_wclass == 1 and flag[0] == 13: class_s = u'paikannimi'
		elif hf_wclass == 1 and flag[0] == 14: class_s = u'nimi'
		else:
			for f in hfconv.flagmap:
				if flag[0] == f[1]: flag_s = flag_s + f[0] + u', '
	if flag_s == u'': flag_s = None
	else: flag_s = flag_s[:-2]
	return (class_s, flag_s)


db = _pg.connect(host='localhost',
                 dbname='joukahainen',
                 port=5432,
                 user='joukahainen',
                 passwd='joukahainen')

results = db.query('SELECT w.word, w.class, sa.value, w.wid FROM word w, string_attribute_value sa ' +
	'WHERE w.wid = sa.wid AND sa.aid = 1 ORDER BY w.word, w.class, w.wid')

for result in results.getresult():
	altforms_res = db.query('SELECT related_word FROM related_word WHERE wid = %i' % result[3])
	if altforms_res.ntuples() == 0: altforms = [unicode(result[0], 'UTF-8')]
	else:
		altforms = []
		for res in altforms_res.getresult():
			altforms.append(unicode(res[0], 'UTF-8'))
	for altform in altforms:
		word = altform.replace(u'|', u'')
		sepind = altform.rfind(u'|')
		if sepind == -1: word_end = word
		else: word_end = altform[sepind+1:]
		if result[1] in [1, 2]:
			hf_class = unicode(result[2], 'UTF-8')
			(alku, jatko) = find_malaga_noun_class(word, hf_class)
			if alku == None:
				print u"Malaga class not found for (%s, %i, %s)" % (result[0], result[1], result[2])
				continue
			vtype = hfutils.vowel_type(word_end)
			if vtype == hfutils.VOWEL_FRONT: malaga_vtype = u'채'
			elif vtype == hfutils.VOWEL_BACK: malaga_vtype = u'a'
			elif vtype == hfutils.VOWEL_BOTH: malaga_vtype = u'a채'
			(wclass_s, flags) = get_class_and_flags(db, result[1], result[3])
			if flags == None: flags = u''
			else: flags = u', tiedot: <%s>' % flags
			outputfile.write(u'[perusmuoto: "%s", alku: "%s", luokka: %s, jatko: <%s>, 채s: %s%s];\n' \
			                 % (word, alku, wclass_s, jatko, malaga_vtype, flags))


outputfile.close()

