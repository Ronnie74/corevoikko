#!/usr/bin/env python2.4
# -*- coding: utf-8 -*-

# Copyright 2006 Harri Pitk채nen (hatapitk@iki.fi)
# Converts files from Suomi-Malaga lexicon format to the database format
# of Joukahainen.
# This program requires Python version 2.4 or newer.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import sys
import locale
import codecs
import re
import hfutils
import hfconv
import _pg

inputfile = codecs.open("/tmp/orig.malaga", "r", "UTF-8")
errorfile = codecs.open("/tmp/virheet.malaga", "w", "UTF-8")
outputfile = codecs.open("/tmp/siirretyt.malaga", "w", "UTF-8")

db = _pg.connect(host='localhost',
                 dbname='joukahainen',
                 port=5432,
                 user='joukahainen',
                 passwd='joukahainen')

def find_hf_class(word, sm_class):
	for infclass in hfconv.classmap:
		for gradclass in infclass[2]:
			if gradclass[2] == sm_class:
				if hfconv.match_re(word, gradclass[1]) == None: continue
				if gradclass[0] == None: return infclass[0]
				for grad in hfconv.grads:
					if grad[0] == infclass[1] and grad[1] == gradclass[0]:
						return infclass[0] + u'-' + grad[2]
	return None

def insert_flags(db, wid, tiedot_s):
	if tiedot_s == None: return
	tiedot = tiedot_s.split(u',')
	for i in range(len(tiedot)): tiedot[i] = tiedot[i].strip()
	for tieto in tiedot:
		for flag in hfconv.flagmap:
			if tieto == flag[0]:
				db.query(u"INSERT INTO flag_attribute_value(wid, aid) VALUES(%i, %i)" \
				         % (wid, flag[1]))

nsre = re.compile(u"\\[perusmuoto: \"(?P<perusmuoto>.(?:[^\"])*)\", alku: \"(?P<alku>.(?:[^\"])*)\", " +
                  u"luokka: (?P<luokka>.(?:[^,])*), jatko: <(?P<jatko>.(?:[^>])*)>, 채s: (?P<as>a|채|a채)" +
                  u"(?:|, tiedot: <(?P<tiedot>.(?:[^>])*)>)\\];")

lista = []

db.query('DELETE FROM related_word')
db.query('DELETE FROM flag_attribute_value')
db.query('DELETE FROM string_attribute_value')
db.query('DELETE FROM word')


while True:
	rivi = inputfile.readline()
	if rivi == u'': break
	match = nsre.match(rivi)
	if match == None:
		errorfile.write(rivi)
	else:
		gd = match.groupdict()
		if gd['luokka'] in [u'nimisana', u'etunimi', u'sukunimi', u'paikannimi', u'nimi']: joclass = 1
		elif gd['luokka'] in [u'laatusana', u'nimi_laatusana']: joclass = 2
		else: continue
		hf_class = find_hf_class(gd['perusmuoto'], gd['jatko'])
		if hf_class == None: continue
		outputfile.write(hfutils.remove_comments(rivi).strip() + u'\n')
		db.query("INSERT INTO word(word, class) VALUES('%s', %i)" %
		         ((gd['perusmuoto'].replace("'", "''")).encode('UTF-8'), joclass))
		res = db.query((u"SELECT wid FROM word WHERE word = '%s' ORDER BY wid DESC" %
		         gd['perusmuoto'].replace("'", "''")).encode('UTF-8'))
		wid = int(res.getresult()[0][0])
		db.query(("INSERT INTO string_attribute_value(wid, aid, value) " +
		          "VALUES(%i, 1, '%s')") % (wid, hf_class))
		if gd['luokka'] == u'nimi_laatusana': nflag = 10
		elif gd['luokka'] == u'etunimi': nflag = 11
		elif gd['luokka'] == u'sukunimi': nflag = 12
		elif gd['luokka'] == u'paikannimi': nflag = 13
		elif gd['luokka'] == u'nimi': nflag = 14
		else: nflag = 0
		if nflag != 0:
			db.query(u"INSERT INTO flag_attribute_value(wid, aid) VALUES(%i, %i)" \
			         % (wid, nflag))
		insert_flags(db, wid, gd['tiedot'])



outputfile.close()
errorfile.close()
inputfile.close()
