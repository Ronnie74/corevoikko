#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2006 - 2007 Harri PitkÃ¤nen (hatapitk@iki.fi)
# Test program for Voikko spellchecker.
# This program requires Python and python-enchant.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import sys
import locale
import enchant
import codecs
import os
import subprocess
import getopt
import voikkoutils


SVNROOT = voikkoutils.get_preference('svnroot')
WORKSPACE = voikkoutils.get_preference('voikkotest_dir')
ENCODING = voikkoutils.get_preference('encoding')
HYPHENCMD = voikkoutils.get_preference('libvoikko_bin') + '/voikkohyphenate'
SPELLCMD = voikkoutils.get_preference('libvoikko_bin') + '/voikkospell'

langcode = "fi_FI"
spelltest = SVNROOT + "/trunk/tests/voikkotest/spell.txt"
hyphentest = SVNROOT + "/trunk/tests/voikkotest/hyphen.txt"
BASE = WORKSPACE + "/base"
WORDLIST = WORKSPACE + "/wordlist.txt.gz"
BASE_CORRECT = WORKSPACE + "/base-correct.txt"
BASE_INFO = WORKSPACE + "/base-info.txt"
CURRENT_CORRECT = WORKSPACE + "/current-correct.txt"
SMV = SVNROOT + "/trunk/suomimalaga"

# Returns a list of hyphenated words. Wordlist is a list of words to hyphenate and
# params is a string containing the parameters for HYPHENCMD
def _hyphenate_wordlist(wordlist, params):
	hyphenator = subprocess.Popen(HYPHENCMD + " " + params, shell = True, stdin = subprocess.PIPE,
	                              stdout = subprocess.PIPE, close_fds = True)
	for word in wordlist:
		hyphenator.stdin.write(word.encode('UTF-8') + '\n')
	(out, err) = hyphenator.communicate()
	rawlist = out.split('\n')
	hyphenatedlist = []
	for hword in rawlist:
		hyphenatedlist.append(unicode(hword, 'UTF-8'))
	return hyphenatedlist #FIXME: last item is an extra empty string


def _check_hyphens(section, expected_results, results):
	failcount = 0
	for i in range(0, len(expected_results)):
		if expected_results[i] != results[i]:
			print u'Hyphenation test failed in section "%s":' % section
			print u'  Expected "%s", got "%s"' % (expected_results[i], results[i])
			failcount = failcount + 1
	return failcount

# Ensure that the current version is up to date
def update_smv():
	if os.system('cd "%s" && make voikko' % SMV) != 0:
		sys.stderr.write(u"Failed to compile new version of Suomi-malaga.\n")
		sys.exit(1)

# Run "make clean"
def clean_smv():
	if os.system('cd "%s" && make clean' % SMV) != 0:
		sys.stderr.write(u'Failed to run "make clean"\n')
		sys.exit(1)

# Initialise the spellchecker
def init_speller():
	dict = None
	try:
		dict = enchant.Dict(langcode)
	except enchant.DictNotFoundError:
		print u"No dictionary was found for language " + langcode
		sys.exit(1)
	sys.stderr.write(u"Using language " + dict.tag + u" with Enchant " + dict.provider.desc + "\n")
	return dict

# Read command line options
(opts, args) = ([], [])
try:
	(opts, args) = getopt.getopt(sys.argv[1:], "", ["base", "compare"])
except getopt.GetoptError:
	sys.stderr.write("Usage: voikkotest           (run only developer tests)\n")
	sys.stderr.write("Usage: voikkotest --base    (use current version as baseline)\n")
	sys.stderr.write("Usage: voikkotest --compare (compare current version against baseline)\n")
	sys.exit(1)

if "--base" in [opt[0] for opt in opts]:
	if os.system('cd "%s" && make voikko-install DESTDIR="%s"' % (SMV, BASE)) != 0:
		sys.stderr.write(u"Failed to create baseline version.\n")
		sys.exit(1)
	sys.stderr.write("Running voikkospell on full wordlist...\n")
	os.system('time zcat "%s" | "%s" -p "%s" | grep "^C:" > "%s"' % \
	          (WORDLIST, SPELLCMD, BASE, BASE_CORRECT))
	sys.exit(0)


# Run the spelling tests
def spell_tests(dict):
	try:
		inputfile = codecs.open(spelltest, "r", ENCODING)
		testcount = 0
		failcount = 0
		linecount = 0
		section = u"(none)"
		negative_test = False
		while True:
			line_orig = inputfile.readline()
			linecount = linecount + 1
			if line_orig == u'': break
			line = line_orig.strip()
			commentstart = line.find(u"#")
			if commentstart != -1: line = line[:commentstart].strip()
			if line.startswith(u'[') and line.endswith(u']'):
				section = line[1:-1]
				continue
			if line.startswith(u'!'):
				negative_test = True
				word = line[1:]
			else:
				negative_test = False
				word = line
			testcount = testcount + 1
			if not (dict.check(word) ^ negative_test):
				print u'Spelling test failed at line %i, section "%s":\n  %s' \
				      % (linecount, section, line_orig)
				failcount = failcount + 1
		inputfile.close()
		if failcount == 0:
			print u"All %i spelling tests were successful." % testcount
			return True
		else:
			print u"%i out of %i spelling tests failed." % (failcount, testcount)
			return False
	except IOError:
		sys.stderr.write("Could not read from file " + spelltest + "\n")
		sys.exit(1)

# Run the hyphenator tests
def hyphen_tests():
	try:
		inputfile = codecs.open(hyphentest, "r", ENCODING)
		testcount = 0
		failcount = 0
		section = u"(none)"
		inputwords = []
		expresults = []
		while True:
			line_orig = inputfile.readline()
			if line_orig == u'': break
			line = line_orig.strip()
			commentstart = line.find(u"#")
			if commentstart != -1: line = line[:commentstart].strip()
			if line.startswith(u'[') and line.endswith(u']'):
				if len(inputwords) > 0:
					results = _hyphenate_wordlist(inputwords, section)
					failcount = failcount + _check_hyphens(section, expresults, results)
					inputwords = []
					expresults = []
				section = line[1:-1]
				continue
			parts = line.split()
			if len(parts) == 0: continue
			inputwords.append(parts[0].strip())
			expresults.append(parts[1].strip())
			testcount = testcount + 1
		inputfile.close()
		if len(inputwords) > 0:
			results = _hyphenate_wordlist(inputwords, section)
			failcount = failcount + _check_hyphens(section, expresults, results)
		if failcount == 0:
			print u"All %i hyphenation tests were successful." % testcount
			return True
		else:
			print u"%i out of %i hyphenation tests failed." % (failcount, testcount)
			return False
	except IOError:
		sys.stderr.write("Could not read from file " + hyphentest + "\n")
		sys.exit(1)

if "--compare" in [opt[0] for opt in opts]:
	clean_smv()
	update_smv()
	dict = init_speller()
	if not spell_tests(dict) or not hyphen_tests():
		sys.stderr.write("Some of the basic tests failed, fix this before using --compare again!\n")
		sys.exit(1)
	sys.stderr.write("Running voikkospell on full wordlist...\n")
	os.system('time zcat "%s" | "%s" | grep "^C:" > "%s"' % \
	          (WORDLIST, SPELLCMD, CURRENT_CORRECT))
	diffcmd = 'diff -U0 "%s" "%s" | ' % (BASE_CORRECT, CURRENT_CORRECT)
	new_accept = int(os.popen('%s grep ^+C: | wc -l' % diffcmd).read())
	old_accept = int(os.popen('%s grep ^-C: | wc -l' % diffcmd).read())
	if new_accept == 0 and old_accept == 0:
		sys.stderr.write("No changes\n")
		sys.exit(0)
	sys.stderr.write("%s previously rejected strings are now accepted.\n" % new_accept)
	sys.stderr.write("%s previously accepted strings are now rejected.\n" % old_accept)
	os.system('%s grep .C: | less' % diffcmd)
else:
	update_smv()
	dict = init_speller()
	spell_tests(dict)
	hyphen_tests()
