#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2005-2007 Harri PitkÃ¤nen (hatapitk@iki.fi)
# This program inflects Finnish words.
# This program requires Python version 2.4 or newer.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

# You may get the words and inflections classes for this command from a
# database dump of Joukahainen with the following query:
#  select w.word, case when w.class in (1,2) then 'subst-' when w.class=3 then 'verbi-' end || s.value
#  from word w, string_attribute_value s where w.wid = s.wid and s.aid = 1;
#
# Such list of words can be processed by running
# cat sanat.txt | xargs -d \\n -n 1 voikko-inflect-word > taivutukset.txt

import hfaffix
import hfutils
import sys
import locale
import voikkoutils

NOUN_AFFIX_FILE = voikkoutils.get_preference('svnroot') + '/trunk/data/subst.aff'
VERB_AFFIX_FILE = voikkoutils.get_preference('svnroot') + '/trunk/data/verb.aff'
PARAM_ENCODING = voikkoutils.get_preference('encoding')

if len(sys.argv) == 3:
	word = unicode(sys.argv[1], PARAM_ENCODING)
	infclass = unicode(sys.argv[2], PARAM_ENCODING)
elif len(sys.argv) == 2 and sys.argv[1].find("|") != -1:
	ind = sys.argv[1].find("|")
	word = unicode(sys.argv[1][:ind], PARAM_ENCODING)
	infclass = unicode(sys.argv[1][ind+1:], PARAM_ENCODING)
else:
	print 'Usage: hf-inflect-word word inflection_class'
	print '       hf-inflect-word word|inflection_class'
	sys.exit(1)

infclass_parts = infclass.split('-')
if len(infclass_parts) == 2:
	wordclass = infclass_parts[0]
	infclass_main = infclass_parts[1]
	grad_type = '-'
elif len(infclass_parts) == 3:
	wordclass = infclass_parts[0]
	infclass_main = infclass_parts[1]
	grad_type = infclass_parts[2]
else:
	print 'Incorrect inflection class'
	sys.exit(1)

if wordclass == u'subst': affixfile = NOUN_AFFIX_FILE
elif wordclass == u'verbi': affixfile = VERB_AFFIX_FILE
else:
	print 'Incorrect word class'
	sys.exit(1)

word_classes = hfaffix.read_word_classes(affixfile)
for word_class in word_classes:
	if not infclass_main in word_class['smcnames']: continue
	inflected_words = hfaffix.inflect_word(word, grad_type, word_class)
	if inflected_words == None: continue
	for inflected_word in inflected_words:
		if hfutils.read_option(inflected_word[2], 'ps', '-') != 'r':
			print (inflected_word[0].ljust(20)+inflected_word[1]).encode(PARAM_ENCODING)

