# Suomi-malaga, suomen kielen muoto-opin kuvaus.
#
# Tekijänoikeus © 2006 Hannu Väisänen (Etunimi.Sukunimi@joensuu.fi)
#
# Tämä ohjelma on vapaa; tätä ohjelmaa on sallittu levittää
# edelleen ja muuttaa GNU yleisen lisenssin (GPL lisenssin)
# ehtojen mukaan sellaisina kuin Free Software Foundation
# on ne julkaissut; joko Lisenssin version 2, tai (valinnan
# mukaan) minkä tahansa myöhemmän version mukaisesti.
#
# Tätä ohjelmaa levitetään siinä toivossa, että se olisi
# hyödyllinen, mutta ilman mitään takuuta; ilman edes
# hiljaista takuuta kaupallisesti hyväksyttävästä laadusta tai
# soveltuvuudesta tiettyyn tarkoitukseen. Katso GPL
# lisenssistä lisää yksityiskohtia.
#
# Tämän ohjelman mukana pitäisi tulla kopio GPL
# lisenssistä; jos näin ei ole, kirjoita osoitteeseen Free
# Software Foundation Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#
# Tämän ohjeman linkittäminen staattisesti tai dynaamisesti
# muihin moduuleihin on ohjelmaan perustuvan teoksen
# tekemistä, joka on siis GPL lisenssin ehtojen alainen.
#
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to the
# Free Software Foundation, Inc., 59 Temple Place -  Suite 330, Boston, MA
# 02111-1307 USA.
#
# Linking this program statically or dynamically with other modules is
# making a combined work based on this program.  Thus, the terms and
# conditions of the GNU General Public License cover the whole
# combination.
#
# This file has been modified by the contributors of Hunspell-fi project.
# Last change was on $Date$ by $Author$.


initial <>, rules nimisana, erisnimi, laatusana, asemosana, apusana, lyhennesääntö,
                  etuliite, teonsana, kieltosana, tavuviiva;

include "suomi.inc";
include "subrule.inc";


define @ehtotapa := <ehtotapa, ehtotapa_ttA, ehtotapa_tA>;

define @mahtotapa := <mahtotapa_le, mahtotapa_ne, mahtotapa_re, mahtotapa_se,
                      mahtotapa_le_kielto, mahtotapa_ne_kielto,
                      mahtotapa_re_kielto, mahtotapa_se_kielto,
                      mahtotapa_ttA, mahtotapa_tA>;

define @käskytapa := <käskytapa, käskytapa_kielto, käskytapa_ttA,
                      käskytapa_tA>;

define @nimitapa_1 := <nimitapa_1_A,  nimitapa_1_dA, nimitapa_1_lA,
                       nimitapa_1_nA, nimitapa_1_rA, nimitapa_1_tA>;
define @nimitapa_2 := <nimitapa_2, nimitapa_2_ttA, nimitapa_2_tA>;
define @nimitapa_3 := <nimitapa_3, nimitapa_3_ttA, nimitapa_3_tA>;

define @laatutapa_1 := <laatutapa_1, laatutapa_1_vE, laatutapa_1_ttA, laatutapa_1_tA>;

define @laatutapa_2 := <laatutapa_2_lUt, laatutapa_2_nUt, laatutapa_2_rUt,
                        laatutapa_2_sUt, laatutapa_2_ttU,
                        laatutapa_2_dU, laatutapa_2_lU, laatutapa_2_nU,
                        laatutapa_2_rU, laatutapa_2_stU, laatutapa_2_tU>;

# Johtimet teonsanoista

define @johdin_nUt := <johdin_lUt, johdin_nUt, johdin_rUt, johdin_sUt>;

define @johdin_tU := <johdin_dU, johdin_lU, johdin_nU, johdin_rU, johdin_tU>;

define @johdin_laatutapa := @johdin_nUt + @johdin_tU + <johdin_stU, johdin_ttU>;
define @johdin_jA := <johdin_jA_myyjä, johdin_jA_kulkija, johdin_jA_kantaja>;

define @johtimet_nimisana_teonsanasta :=
       <johdin_mA, johdin_UUs, johdin_Us, johdin_ntA, johdin_nti, johdin_Us_ksen>
       + @johdin_jA;

define @johtimet_laatusana_teonsanasta :=
       <johdin_tOn, johdin_vA, johdin_vE, johdin_vAinen, johdin_tAvA, johdin_ttAvA,
        johdin_llinen> + @johdin_laatutapa;

define @johtimet_seikkasana_teonsanasta := <johdin_ittAin>; #FIXME: onko tämä oikein?

define @johdin_teonsanasta := @johtimet_nimisana_teonsanasta
                            + @johtimet_laatusana_teonsanasta
                            + @johtimet_seikkasana_teonsanasta;


# Johtimet nimisanoista

define @johtimet_nimisana_nimisanasta := <johdin_tAr, johdin_lAinen>;

define @johtimet_laatusana_nimisanasta := <johdin_llinen, johdin_inen, johdin_tOn,
                                           johdin_mAinen, johdin_lAinen>;

define @johtimet_seikkasana_nimisanasta := <johdin_ittAin>;

define @johdin_nimisanasta := @johtimet_nimisana_nimisanasta
                            + @johtimet_laatusana_nimisanasta
                            + @johtimet_seikkasana_nimisanasta
                            + @johdin_jA; #FIXME: onko tämä oikein?


# Johtimet laatusanoista
define @johtimet_nimisana_laatusanasta := <johdin_Us, johdin_UUs>;
define @johtimet_laatusanasta := @johtimet_nimisana_laatusanasta;


define @johdin := @johdin_teonsanasta + @johdin_nimisanasta + @johtimet_laatusanasta;


combi_rule etuliite ($vasen, $oikea, $sana):
  ? $oikea.luokka = etuliite;

  define $i := length ($vasen);

  if ($i greater 0) then
    ? ($oikea.luokka in $vasen.$i.jatko);
    ? yhdyssana_oikein ($vasen, $oikea, $i);
  end;

  if (nimisana in $oikea.jatko) then
    result $vasen + <[alku: $sana] + $oikea>,
           rules nimisana_teonsanasta;
  end;

  if (kieltosana in $oikea.jatko) then
    result $vasen + <[alku: $sana] + $oikea>, rules kieltosana;
  else
    result $vasen + <[alku: $sana] + $oikea>,
           rules etuliite, nimisana, laatusana, teonsana, tavuviiva;
  end;
end;

combi_rule erisnimi ($vasen, $oikea, $sana):
  ? $oikea.luokka in @erisnimi;

  result $vasen + <[alku: $sana] + $oikea>,
         rules erisnimen_sijapääte,
	       omistusliite,
	       liitesana,
	       nimisanan_johdos, # -lainen
	       tavuviiva,
	       loppu;
end;


combi_rule nimisana ($vasen, $oikea, $sana):
  ? $oikea.luokka in <nimisana, nimi_laatusana, seikkasana, lukusana, suhdesana>;

  define $i := length ($vasen);

  if ($i greater 0) then
    ? (($oikea.luokka in $vasen.$i.jatko) or
       ((nimisana in $vasen.$i.jatko) and
        ($oikea.luokka in @nimisana + <lukusana>)));

    ? yhdyssana_oikein ($vasen, $oikea, $i);

    if $vasen.$i.luokka in <laatusana, nimi_laatusana> then
      result $vasen + <[alku: $sana] + $oikea>,
             rules nimisanan_johdos;
      if $vasen.$i.luokka = laatusana then stop; end;
    end;
  end;

  result $vasen + <[alku: $sana] + $oikea>,
         rules sijapääte, omistusliite,
	       nimisana, etuliite,
               liitesana,
               nimisanan_johdos,
	       laatusana_nimisanan_perässä,
               nimisana_laatusanasta, nimisana_teonsanasta,
               tavuviiva,
               loppu;
end;


# Teonsanasta johdettu nimisana, esim. sanoma <- sanoa.
combi_rule nimisana_teonsanasta ($vasen, $oikea, $sana):
  ? $oikea.luokka = teonsana;
  define $i := length($vasen);
  ? $vasen.$i.perusmuoto matches ".*nen" or $vasen.$i.perusmuoto = $vasen.$i.alku;
  result $vasen + <[alku: $sana] + $oikea>,
         rules teonsanan_johdos, # FIXME: johdetun muodon on oltava nimisana
	       nimitavat;
end;

# Laatusanasta johdettu nimisana, esim. vapaus <- vapaa.
combi_rule nimisana_laatusanasta ($vasen, $oikea, $sana):
  ? $oikea.luokka in @laatusana;
  define $i := length($vasen);
  ? $vasen.$i.perusmuoto matches ".*nen" or $vasen.$i.perusmuoto = $vasen.$i.alku;
  result $vasen + <[alku: $sana] + $oikea>,
         rules laatusanan_johdos; # FIXME: johdetun muodon on oltava nimisana
end;


combi_rule laatusana ($vasen, $oikea, $sana):
  ? $oikea.luokka in @laatusana;

  define $i := length ($vasen);

  if ($i greater 0) then
    ? (laatusana in $vasen.$i.jatko);
    ? yhdyssana_oikein ($vasen, $oikea, $i);
  end;

  result $vasen + <[alku: $sana] + $oikea>,
         rules sijapääte, omistusliite,
               liitesana,
               nimisana, laatusana,
               laatusanan_johdos,
               voitto_yliaste,
               tavuviiva,
               etuliite,
               loppu;
end;


combi_rule laatusana_nimisanan_perässä ($vasen, $oikea, $sana):
  # FIXME: sääntö, joka sallii sanat "kielipoliittinen" yms. Tätä pitäisi tarkentaa.
  ? $oikea.luokka in @laatusana;
  ? $oikea.perusmuoto matches ".*inen";

  define $len := length($vasen);
  ? nimisana in $vasen.$len.jatko; # FIXME: tällä tarkoitetaan, että $vasen on kompositiivimuoto
  ? yhdyssana_oikein ($vasen, $oikea, $len);

  # nimisana, laatusana ja etuliite jätetty pois, koska todennäköinen käyttö vähäistä
  # (teoriassa voi olla OK)
  result $vasen + <[alku: $sana] + $oikea>,
         rules sijapääte, omistusliite,
	       liitesana,
	       laatusanan_johdos,
	       tavuviiva,
	       loppu;
end;

combi_rule asemosana ($vasen, $oikea, $sana):
  ? $oikea.luokka = asemosana;

  result $vasen + <[alku: $sana] + $oikea>,
         rules sijapääte, liitesana, tavuviiva, loppu;
end;


combi_rule lyhennesääntö ($vasen, $oikea, $sana):
  ? $oikea.luokka = lyhenne;

  define $res := $vasen + <[alku: $sana] + $oikea>;
  if (kaksoispiste in $oikea.jatko) then result $res, rules kaksoispiste; end;
  if (tavuviiva in $oikea.jatko) then result $res, rules tavuviiva; end;
  if (loppu in $oikea.jatko) then result $res, rules loppu; end;
end;


combi_rule apusana ($vasen, $oikea, $sana):
  ? $oikea.luokka in <huudahdussana, sidesana>;

  result $vasen + <[alku: $sana] + $oikea>,
         rules liitesana, tavuviiva, loppu;
end;


combi_rule kaksoispiste ($vasen, $oikea, $sana):
  ? $oikea.luokka = kaksoispiste;

  result $vasen + <[alku: $sana] + $oikea + [äs: $vasen.length($vasen).äs]>,
         rules sijapääte;
end;


combi_rule tavuviiva ($vasen, $oikea, $sana):
  ? $oikea.luokka = tavuviiva;

  define $i := length ($vasen);

  ? (($i = 0) or (tavuviiva in $vasen.$i.jatko));

  result $vasen + <[alku: $sana] + $oikea>,
         rules nimisana, erisnimi, laatusana, asemosana, lyhennesääntö,
               etuliite, teonsana, kieltosana, loppu;
end;


define @sti_edeltäjä := <laatusana, nimi_laatusana, voittoaste, yliaste,
                         lukusana,
                         johdin_nUt,
                         johdin_tAvA, johdin_ttAvA, johdin_ttU,
                         johdin_vA, johdin_vAinen, johdin_vE>
                        + @johtimet_laatusana_nimisanasta
                        + @laatutapa_1 + @laatutapa_2;

combi_rule erisnimen_sijapääte ($vasen, $oikea, $sana):
  ? $oikea.luokka = sijapääte;

  define $edellinen := $vasen.length($vasen);

  ? $oikea.sija in $edellinen.jatko;
  ? ääntiösointu_oikein ($vasen, $oikea, $sana);

  if ($oikea.sija in <sisätulento_Vn, sisätulento_hVn>) then
    require (sisätulento_oikein ($oikea.sija, $edellinen.alku, $sana));
  end;

  if ($oikea.sija = kerronto_sti) then
    ? $edellinen.luokka in @sti_edeltäjä;
    result $vasen + <[alku: $sana] + $oikea>,
           rules liitesana, loppu;
  else
    result $vasen + <[alku: $sana] + $oikea>,
           rules tavuviiva, omistusliite, liitesana, loppu;
  end;
end;


combi_rule sijapääte ($vasen, $oikea, $sana):
  ? $oikea.luokka = sijapääte;

  define $edellinen := $vasen.length($vasen);
  define $res := $vasen + <[alku: $sana] + $oikea>;

  if ($edellinen.luokka = kaksoispiste) then
    ? $oikea.sija /= keinonto_n;
    ? ($edellinen.äs = aä) or ($oikea.äs = aä) or ($edellinen.äs = $oikea.äs);
    result $res,
           rules omistusliite, liitesana, loppu;
  else
    ? $oikea.sija in $edellinen.jatko;
    ? ääntiösointu_oikein ($vasen, $oikea, $sana);

    if ($oikea.sija in <sisätulento_Vn, sisätulento_hVn>) then
      require (sisätulento_oikein ($oikea.sija, $edellinen.alku, $sana));
    end;

    if ($oikea.sija = kerronto_sti) then
      ? $edellinen.luokka in @sti_edeltäjä;
      result $res,
             rules liitesana, loppu;
    else
      result $res,
             rules omistusliite, liitesana, loppu;
      if ($edellinen.tiedot = nil or not (ei_ysa in $edellinen.tiedot)) then
        result $res,
               rules nimisana, laatusana, teonsana, tavuviiva;
      end;
    end;
  end;
end;


###### LUKUSANASÄÄNNÖT ALKAVAT

combi_rule lukusana_perusluku ($vasen, $oikea, $sana):
  ? $oikea.luokka = lukusana;
  ? perusluku in $oikea.alaluokka;
  define $res := $vasen + <[alku: $sana] + $oikea>;

  if (yksiyhdeksän in $oikea.alaluokka) then
    if (nimentö in $oikea.jatko) then
      result $res, rules lukusana_sisäkerroin, loppu;
    end;
  end;

end;

combi_rule lukusana_sisäkerroin ($vasen, $oikea, $sana):
  ? $oikea.luokka = lukusana;
  ? sisäkerroin in $oikea.alaluokka;
  define $res := $vasen + <[alku: $sana] + $oikea>;

end;


###### LUKUSANASÄÄNNÖT PÄÄTTYVÄT

combi_rule teonsana ($vasen, $oikea, $sana):
  ? $oikea.luokka = teonsana;

  define $i := length ($vasen);

  if ($i greater 0) then
    ? $oikea.luokka in $vasen.$i.jatko;
    ? yhdyssana_oikein ($vasen, $oikea, $i);
  end;

  result $vasen + <[alku: $sana] + $oikea>,
         rules tekijämuodot, nimitavat, laatutavat,
               liitesana,
               teonsanan_johdos,
               tavuviiva, loppu;
end;


combi_rule tekijämuodot ($vasen, $oikea, $sana):
  ? $oikea.luokka in @kestämän_tekijäpääte + @tositavan_tekijäpääte_4
                     + @kertoman_tekijäpääte
                     + @ehtotapa + @mahtotapa + @käskytapa;

  define $i := length ($vasen);
  ? $vasen.$i.luokka = teonsana;
  ? $oikea.luokka in $vasen.$i.jatko;
  ? ääntiösointu_oikein ($vasen, $oikea, $sana);
  ? yhdysteonsana_oikein ($vasen, $i);

  if (($oikea.luokka = kestämän_tekijäpääte_y3)
      and ($vasen.$i.alku matches ".*" + @ääntiö)) then
    require (viimeinen_kirjain ($vasen.$i.alku) = $sana);
  end;


  result $vasen + <[alku: $sana] + $oikea>,
         rules liitesana, loppu;
end;


combi_rule nimitavat ($vasen, $oikea, $sana):
  ? $oikea.luokka in @nimitapa_1 + @nimitapa_2 + @nimitapa_3 + <nimitapa_4, nimitapa_5>;

  define $i := length ($vasen);
  ? $vasen.$i.luokka = teonsana;
  ? $oikea.luokka in $vasen.$i.jatko;
  ? ääntiösointu_oikein ($vasen, $oikea, $sana);

  if ($oikea.luokka in @nimitapa_1 + @nimitapa_2 + @nimitapa_3) then
    ? yhdysteonsana_oikein ($vasen, $i);
  end;

  result $vasen + <[alku: $sana] + $oikea>,
         rules nimitapa_1_pitkä, sijapääte, omistusliite,
               liitesana,
               nimisana, laatusana, teonsana,
               loppu;
end;


combi_rule nimitapa_1_pitkä ($vasen, $oikea, $sana):
  ? $oikea.luokka = nimitapa_1_pitkä;

  define $i := length ($vasen);
  ? $vasen.$i.luokka in @nimitapa_1;
  ? nimitapa_1_pitkä in $vasen.$i.jatko;
  ? ääntiösointu_oikein ($vasen, $oikea, $sana);

  result $vasen + <[alku: $sana] + $oikea>, rules omistusliite;
end;


combi_rule laatutavat ($vasen, $oikea, $sana):
  ? $oikea.luokka in @laatutapa_1 + @laatutapa_2;

  define $i := length ($vasen);
  ? $oikea.luokka in $vasen.$i.jatko;
  ? $vasen.$i.luokka = teonsana;
  ? ääntiösointu_oikein ($vasen, $oikea, $sana);
  ? yhdysteonsana_oikein ($vasen, $i);

  result $vasen + <[alku: $sana] + $oikea>,
         rules sijapääte, omistusliite, liitesana,
               voitto_yliaste, loppu;
end;


combi_rule kieltosana ($vasen, $oikea, $sana):
  ? $oikea.luokka = kieltosana;

  result $vasen + <[alku: $sana] + $oikea>,
         rules liitesana, liitesana_kä, tavuviiva, loppu;
end;


combi_rule liitesana ($vasen, $oikea, $sana):
  ? $oikea.luokka in <liitesana, liitesana_pi, liitesana_s>;

  define $i := length ($vasen);
  ? $oikea.luokka in $vasen.$i.jatko;
  ? ääntiösointu_oikein ($vasen, $oikea, $sana);

  if (($vasen.$i.luokka = teonsana) and
      ($vasen.$i.tapaluokka = käskytapa) and
      ($vasen.$i.tekijä = 2) and
      ($vasen.$i.luku = yksikkö)) then
    ? not ($sana in <"ko", "kö">);
  end;

  result $vasen + <[alku: $sana] + $oikea>, rules loppu;
end;


combi_rule liitesana_kä ($vasen, $oikea, $sana):
  ? $oikea.luokka = liitesana_kä;

  define $i := length ($vasen);
  ? liitesana_kä in $vasen.$i.jatko;
  ? ääntiösointu_oikein ($vasen, $oikea, $sana);

  result $vasen + <[alku: $sana] + $oikea>, rules liitesana, loppu;
end;


combi_rule omistusliite ($vasen, $oikea, $sana):
  ? $oikea.luokka = omistusliite;

  define $i := length ($vasen);
  ? omistusliite in $vasen.$i.jatko;

  ? ääntiösointu_oikein ($vasen, $oikea, $sana);

  define $result := $vasen + <[alku: $sana] + $oikea>;

  if ($i greater 1) then
    ? (not ($vasen.<1,luokka> = asemosana));
  end;

  if ($sana in <"ni", "si", "s", "nsa", "nsä", "mme", "nne">) then
    result $result,
           rules liitesana, loppu;
  else
    if ($vasen.$i.luokka in <seikkasana, suhdesana> and omistusliite3_oikein ($vasen.$i.alku, $sana)) then
      if (not (strcat ($vasen) matches ".*(aa|ee|ii|oo|uu|yy|ää|öö)")) then
          result $result,
                 rules liitesana, loppu;
      end;
    elseif ($vasen.$i.luokka = sijapääte) then
      if (($vasen.$i.sija in <osanto_A, osanto_iA,
                              osanto_tA, osanto_ttA, osanto_itA,
                              osanto_jA,
                              olento_nA, olento_inA,
                              tulento_ksi, tulento_iksi,
                              sisäolento_ssA, sisäolento_issA,
                              sisäeronto_stA, sisäeronto_istA,
                              ulko_olento_llA, ulko_olento_illA,
                              ulkoeronto_ltA, ulkoeronto_iltA,
                              ulkotulento_lle, ulkotulento_ille,
                              vajanto_ttA, vajanto_ittA,
                              seuranto_ine>) and
          omistusliite3_oikein ($vasen.$i.alku, $sana)) then
        if (not (strcat ($vasen) matches ".*(aa|ee|ii|oo|uu|yy|ää|öö)")) then
          result $result,
                 rules liitesana, loppu;
        end;
      end;
    elseif (($vasen.$i.luokka in <nimitapa_1_pitkä, nimitapa_2, nimitapa_3, nimitapa_5>) and
            omistusliite3_oikein ($vasen.$i.alku, $sana)) then
      result $result,
             rules liitesana, loppu;
    end;
  end;
end;


combi_rule voitto_yliaste ($vasen, $oikea, $sana):
  ? $oikea.luokka in <voittoaste, yliaste>;

  define $i := length ($vasen);

  ? $vasen.$i.luokka in @laatusana + <johdin_vAinen> +
                        @johtimet_laatusana_nimisanasta
                        + @laatutapa_1 + @laatutapa_2 + @johdin_laatutapa;

  ? (voittoaste in $vasen.$i.jatko) or (yliaste in $vasen.$i.jatko);
  ? $oikea.luokka in $vasen.$i.jatko;
  ? ääntiösointu_oikein ($vasen, $oikea, $sana);

  result $vasen + <[alku: $sana] + $oikea>,
         rules sijapääte, liitesana, omistusliite,
               laatusanan_johdos,
               nimisana, laatusana, teonsana,
               loppu;
end;


combi_rule teonsanan_johdos ($vasen, $oikea, $sana):
  ? $oikea.luokka in @johdin_teonsanasta + <johdin_inen>;

#define $b2 := transmit (<"b2"> + <$oikea.luokka>);

  define $i := length ($vasen);
  if ($i greater 0) then
    ? $oikea.luokka in $vasen.$i.jatko;
  end;

  ? ääntiösointu_oikein ($vasen, $oikea, $sana);

  if ($vasen.$i.luokka = teonsana) then
    $vasen.$i :=+ [lähtöluokka: $vasen.$i.luokka];
    $vasen.$i.luokka := nimisana;
  end;

#if ($sana = "uks") then
#define $a1 := transmit (<"a2"> + $vasen);
#define $b1 := transmit (<"b2"> + <$oikea.luokka>);
#define $c1 := transmit (<"c2"> + <$sana>);
#end;

#if ($sana = "inen") then
#define $nimi := transmit ("teonsanan_johdos " + $vasen.$i.alku + " " + $sana);
#define $a2 := transmit (<"a2"> + $vasen);
#define $b2 := transmit (<"b2"> + <$oikea.luokka>);
#define $c2 := transmit (<"c2"> + <$sana>);
#end;

  if ($oikea.luokka in <johdin_UUs, johdin_Us, johdin_ntA, johdin_nti, johdin_Us_ksen,
                        johdin_mA> + @johdin_jA) or
     ($oikea.luokka in <johdin_vA, johdin_vE> and $oikea.perusmuoto in <"vuus", "vyys">) then
    result $vasen + <[alku: $sana] + $oikea>, rules nimisana, nimisana_teonsanasta,
                                                    nimisana_laatusanasta;
  end;

  result $vasen + <[alku: $sana] + $oikea>,
          rules sijapääte, omistusliite, liitesana,
                teonsanan_johdos,
                voitto_yliaste,
                etuliite,
                tavuviiva, loppu;
end;


combi_rule nimisanan_johdos ($vasen, $oikea, $sana):
  ? $oikea.luokka in @johdin_nimisanasta;

  define $i := length ($vasen);
  ? $oikea.luokka in $vasen.$i.jatko;
  if $oikea.luokka = johdin_lAinen then
    ? $vasen.$i.luokka = paikannimi;
  else
    ? $vasen.$i.luokka in <nimisana, nimi_laatusana> + @johtimet_nimisana_nimisanasta
      + @johtimet_nimisana_laatusanasta + @johtimet_nimisana_teonsanasta;
  end;

  ? ääntiösointu_oikein ($vasen, $oikea, $sana);

  if ($oikea.luokka = johdin_inen) then
    ? not ($i greater 1 and $vasen.$i.perusmuoto /= nil and $vasen.$i.perusmuoto = "maa");
    result $vasen + <[alku: $sana] + $oikea>,
           rules sijapääte, omistusliite, liitesana,
                 voitto_yliaste, laatusanan_johdos,
                 tavuviiva, loppu;
    stop;
  end;

  result $vasen + <[alku: $sana] + $oikea>,
          rules sijapääte, omistusliite, liitesana,
                nimisana, laatusana, teonsana,
                voitto_yliaste,
                laatusanan_johdos, nimisanan_johdos,
                etuliite,
                tavuviiva,
                loppu;
end;


combi_rule laatusanan_johdos ($vasen, $oikea, $sana):
# Laatusana voi olla myös nimi_laatusana, siksi @johdin_nimisanasta.
  ? $oikea.luokka in @johtimet_nimisana_laatusanasta + @johdin_nimisanasta;

  define $i := length ($vasen);
#define $a := transmit (<$vasen.$i> + <$oikea> + <$sana>);

  if ($i greater 0) then
    ? $oikea.luokka in $vasen.$i.jatko;

    # Ilman tätä kulkea => kulki+ja+tar -johdokset tulevat kahdesti.
    if ($vasen.$i.luokka in @johdin_jA) then
      ? $oikea.luokka /= johdin_tAr;
    end;
  end;

  ? ääntiösointu_oikein ($vasen, $oikea, $sana);

  result $vasen + <[alku: $sana] + $oikea>,
          rules sijapääte, omistusliite, liitesana,
                nimisana, laatusana, teonsana,
                laatusanan_johdos, nimisanan_johdos,
                voitto_yliaste,
                etuliite,
                tavuviiva, loppu;
end;


subrule strcat ($vasen):
  define $s := "";

  foreach $k in $vasen:
    $s :=+ $k.alku;
  end;

  return $s;
end;


subrule sana1 ($tietue):
  if ($tietue.perusmuoto = nil) then
    return $tietue.alku;
  else
    return $tietue.perusmuoto;
  end;
end;


subrule sisätulento_Vn_oikein ($sija, $alku, $sana):
  return (($sija = sisätulento_Vn)
          and ((($alku matches ".*" + @a) and ($sana matches "an?")) or
               (($alku matches ".*" + @e) and ($sana matches "en?")) or
               (($alku matches ".*" + @i) and ($sana matches "in?")) or
               (($alku matches ".*" + @o) and ($sana matches "on?")) or
               (($alku matches ".*" + @u) and ($sana matches "un?")) or
               (($alku matches ".*" + @y) and ($sana matches "yn?")) or
               (($alku matches ".*" + @ä) and ($sana matches "än?")) or
               (($alku matches ".*" + @ö) and ($sana matches "ön?"))));
end;


subrule sisätulento_hVn_oikein ($sija, $alku, $sana):
  return (($sija = sisätulento_hVn)
          and ((($alku matches ".*" + @a) and ($sana matches "han?")) or
               (($alku matches ".*" + @e) and ($sana matches "hen?")) or
               (($alku matches ".*" + @i) and ($sana matches "hin?")) or
               (($alku matches ".*" + @o) and ($sana matches "hon?")) or
               (($alku matches ".*" + @u) and ($sana matches "hun?")) or
               (($alku matches ".*" + @y) and ($sana matches "hyn?")) or
               (($alku matches ".*" + @ä) and ($sana matches "hän?")) or
               (($alku matches ".*" + @ö) and ($sana matches "hön?")) or
               (($alku matches ".*'")))); # Parfait'hen yms.
end;


subrule sisätulento_oikein ($sija, $alku, $sana):
  return (sisätulento_Vn_oikein  ($sija, $alku, $sana) or
          sisätulento_hVn_oikein ($sija, $alku, $sana) or
          ($sija = sisätulento_seen) or
          ($sija = sisätulento_isiin));
end;


subrule ääntiösointu_oikein ($vasen, $oikea, $sana):
  define $äs := "?";

  # Etu- tai takaääntiöys määräytyy yhdyssanan viimeisen
  # osan mukaan, esimerkiksi: hevose+sta, miehe+stä, hevos+miehe+stä.
  #
  foreach $j in $vasen:
    if (value_type ($j) = list) then
      foreach $i in $j:
        if ($i.perusmuoto /= nil) then
          $äs := $i.äs;
        end;
      end;
    elseif ($j.perusmuoto /= nil) then
      $äs := $j.äs;
    elseif ($j.luokka = lyhenne) then
      $äs := $j.äs;
    end;
  end;

#define $ä1 := transmit (<"ä1"> + <$vasen>);
#define $ä2 := transmit (<"ä2"> + <$oikea>);
#define $ä3 := transmit (<"ä3"> + <$sana>);
#define $ä4 := transmit (<"ä4"> + <$äs> + <$oikea.äs>);

  if ($äs = aä) then
    return yes;
  elseif ($äs = a) then
    return ($oikea.äs in <a, aä>);
  elseif ($äs = ä) then
    return ($oikea.äs in <ä, aä>);
  else
    define $a := transmit (<$äs> + <$oikea.äs>);
    error "subrule ääntiösointu_oikein: muuttujalla $äs tai $oikea.äs on väärä arvo.";
  end;
end;


# Hyväksytäänkö teonsanat tyyppiä "ohjelma+listata".
#
subrule yhdysteonsana_oikein ($vasen, $i):
# Ota kommentti pois seuraavan rivin alusta, jos haluat hyväksyä yhdysteonsanat.
#  return yes;

  if ($i greater 1) then
    foreach $k in $vasen:
      if (not ($k.luokka in <teonsana, etuliite>)) then
        stop;
      end;
    end;
  end;
  return yes;
end;


subrule omistusliite3_oikein ($sana, $liite):
  return ((($sana matches ".*" + @a) and ($liite = "an")) or
          (($sana matches ".*" + @e) and ($liite = "en")) or
          (($sana matches ".*" + @i) and ($liite = "in")) or
          (($sana matches ".*" + @o) and ($liite = "on")) or
          (($sana matches ".*" + @u) and ($liite = "un")) or
          (($sana matches ".*" + @y) and ($liite = "yn")) or
          (($sana matches ".*" + @ä) and ($liite = "än")) or
          (($sana matches ".*" + @ö) and ($liite = "ön")));
end;


subrule viimeinen_kirjain ($sana):
  if     ($sana matches ".*" + @a) then return "a";
  elseif ($sana matches ".*" + @e) then return "e";
  elseif ($sana matches ".*" + @i) then return "i";
  elseif ($sana matches ".*" + @o) then return "o";
  elseif ($sana matches ".*" + @u) then return "u";
  elseif ($sana matches ".*" + @y) then return "y";
  elseif ($sana matches ".*" + @ä) then return "ä";
  elseif ($sana matches ".*" + @ö) then return "ö";
  else
    error "Viimeinen kirjain ei ole ääntiö sanassa " + $sana;
  end;
end;



subrule yhdyssana_oikein ($vasen, $oikea, $i):
#define $a := transmit (<$oikea.luokka> + <$oikea.perusmuoto> + <$vasen.$i.luokka>);
#define $b := transmit (<$vasen.$i.perusmuoto> + <$oikea.perusmuoto>);

#if ($oikea.perusmuoto = "ula") then
#define $a1 := transmit (<"a1"> + <$vasen>);
#define $b1 := transmit (<"b1"> + <$oikea>);
#define $c1 := transmit (<"c1"> + <$i>);
#end;

#define $a := transmit (<"a"> + <($vasen.1).alku> + <($vasen.1).perusmuoto> + <($vasen.1).luokka>);
#define $b := transmit (<"b"> + <($vasen.$i).alku> + <($vasen.$i).perusmuoto> + <($vasen.$i).luokka>);
#define $c := transmit (<"c"> + <$oikea.alku> + <$oikea.perusmuoto> + <$oikea.luokka>);
#define $d := transmit (<"d"> + <$i>);

  # Erisnimet eivät voi olla yhdyssanojen osana.
  #
  define $nimet := <etunimi, sukunimi, nimi>;

  if (switch (malli) = voikko) then
    $nimet := <etunimi, sukunimi, paikannimi, nimi>;
    #
    # Yhdysviivan käsittely
    #
    if ($i greater_equal 2) and ($vasen.$i.luokka = tavuviiva) then

      # Yhdysviiva aina sallittu erisnimien ja lyhenteiden jälkeen
      if ($vasen.($i - 1).luokka in $nimet + <lyhenne, huudahdussana>) then
        return yes;

      # Yhdysviiva sallittu, kun alkuosa loppuu samaan vokaaliin jolla loppuosa alkaa
      #elseif ($vasen.($i - 1).luokka in <nimisana, nimi_laatusana>) and
      elseif
             ((($vasen.($i - 1).alku) matches ".*" + @ääntiö) and
              (last($vasen.($i - 1).alku) = first($oikea.perusmuoto))) then
        return yes;

      # "Ruotsin-laiva"
      elseif ($i greater_equal 3) and ($vasen.($i - 1).luokka = sijapääte) and
             ($vasen.($i - 1).sija = omanto_n) and ($vasen.($i - 2).luokka in $nimet) then
        return yes;

      # is- ("teknillis-tieteellinen", "Kaakkois-Suomi")
      # FIXME: tämä ei ole tarkalleen ottaen oikein, mutta toistaiseksi riittävän hyvä
      elseif (($vasen.($i - 1).alku) matches ".*is") then
        return yes;

      end;
      # Yhdysviiva muutoin kielletty
      return no;

    end;
  elseif (($i greater_equal 2) and
          ($vasen.$i.luokka = tavuviiva) and
          (($vasen.($i - 1).luokka in $nimet) or ($oikea.luokka in $nimet))) then
    #
    # Hyväksytään kaksiosainen erisnimi ("Anna-Mari") tai erisnimi viivan
    # kanssa yhdyssanassa ("Anna-niminen").
    #
    return yes;
  end;


  if ($oikea.luokka in $nimet) then
    return no;
  end;


  # Jotkut sanat eivät voi olla yhdyssanojen osina.
  #
  if ((($vasen.$i.tiedot /= nil) and ((ei_ys in $vasen.$i.tiedot) or (latex in $vasen.$i.tiedot))) or
      (($oikea.tiedot    /= nil) and ((ei_ys in $oikea.tiedot)    or (latex in $oikea.tiedot)))) then
    return no;
  end;
  # Ei hyväksytä tälläisia sanoja silloinkaan, kun sijamuoto on joku muu kuin nimentö (isi+n+maa ei käy).
  #
  if (($vasen.$i.luokka = sijapääte) and ($vasen.($i-1).tiedot /= nil) and (ei_ys in $vasen.($i-1).tiedot)) then
    return no;
  end;

  if ($oikea.perusmuoto = "isyys") then
    # Ei ymmärtä+vä+isyys.
    return (not ($vasen.$i.luokka in <johdin_vA, johdin_ttAvA, johdin_vE>));
  elseif (($oikea.perusmuoto = "ula") and ($oikea.luokka = nimisana)) then
    return (not ($vasen.$i.luokka = johdin_inen));  # Ei vo+is+ula (voi + inen + ula tai vuo + inen + ula).
  elseif (($oikea.perusmuoto = "toinen") and ($vasen.$i.luokka = johdin_inen)) then
    return no;            # Ei vuor+is+toinen (vuori + -inen + toinen).
  elseif (($oikea.luokka = etuliite) and
          ($oikea.perusmuoto = "uus") and
          ($vasen.$i.perusmuoto /= nil)) then
    if ($vasen.$i.perusmuoto = "jumal") then
      return no;     # Ei jumal+uus+oppi.
    else
      return (not ($vasen.$i.perusmuoto matches ".*inen"));
    end;
  elseif (($vasen.$i.tiedot /= nil) and (ei_ysa in $vasen.$i.tiedot) and
          ($oikea.luokka in @nimisana + <nimi_laatusana>)) then
    return no;
  else
#define $a := transmit ("Huuhaa.");
    define $taulukko := <
#      <<"">,    <"">>,
      <<"agra">,            <"ari", "arka">>,
      <<"alanen">,          <"pää", "suka", "sukia", "suu", "tulo">>,
      <<"alas">,            <"suka", "sukia">>,
      <<"alko">,            <"iva", "ivata">>,
      <<"alli", "pasi">,    <"anssi">>,
      <<"anti">,            <"lainata">>,
      <<"arja">,            <"lainen">>,
      <<"askar">,           <"re">>,
      <<"auto">,            <"nova">>,  # Auto+novien.
      <<"de">,              <"lego", "mono", "sika">>,  # Ei de+lego+iva, de+mono+logi, geo+de+siassa.
      <<"eri", "esi">,      <"koi">>,   # Eri+koi+sala, esi+kois- (esi + koi + inen).
      <<"esikoinen">,       <"uusi">>,  # Esikois+uutensa (esikois + uusi).
      <<"fakki", "suhta">,  <"utu">>,   # Fakki+utu+a, suhta+utu+a.
      <<"funktio">,   <"naali">>,
      <<"hai">,       <"talli">>,    # Hai+tallinen.
      <<"hara">,      <"voi", "voida", "vuo">>,
      <<"harras">,    <"teli">>,
      <<"heinä">,     <"tupo">>,
      <<"helve">,     <"tilli">>,
      <<"hyppy">,     <"selli">>,
      <<"hypo">,      <"tee", "teesi">>,
      <<"hätä">,      <"katka">>,
      <<"isä">,       <"nisä">>,
      <<"itse">,      <"matto", "tie">>,
      <<"iva">,       <"nova">>,
      <<"jumal">,     <"uus">>,
      <<"kalla">,     <"vesi">>,
      <<"kapi">,      <"nalli">>,  # Kapi+nallinen.
      <<"kare">,      <"lika">>,
      <<"karja">,     <"lainen">>,
      <<"karri">,     <"ääri">>,
      <<"kato">,      <"lila">>,
      <<"kemi">,      <"alli">>,
      <<"koko">,      <"nainen">>,      # Koko+nais+valtainen.
      <<"koti", "kotiin">, <"pää">>,    # Kotiinpäin.
      <<"kulti">,          <"voi", "vuo">>,
      <<"kuu">,            <"kausittainen", "luksus", "luminen">>,
      <<"lainen">,    <"kala", "kasti", "kistu", "kuri", "kuu">>,
      <<"loinen">,    <"tee", "tehdä">>,
      <<"lukunen">,   <"alin">>,
      <<"läinen">,    <"käki">>,
      <<"maa">,       <"gis", "nisä">>,
      <<"maagi">,     <"seksi", "silta">>,
      <<"mainen">,    <"emä">>,
      <<"maini">,     <"ostaa", "ottaa", "tukea", "tuki">>,
      <<"mari">,      <"nasta">>,
      <<"mansi">,     <"kastaa", "koi", "koittaa">>,
      <<"metaani">,   <"rikastaa">>,
      <<"moni">,      <"naida", "nainen", "tora", "tori">>,
      <<"musti">,     <"koi", "koettaa">>,
      <<"nomi">,      <"suu">>,
      <<"onninen">,   <"tuttu">>,
      <<"ope">,       <"reti">>,
      <<"oppinen">,   <"ääntö">>,
      <<"orto">,      <"peti">>,
      <<"peli">,      <"manni">>,
      <<"pois">,      <"pää", "taka", "tuki", "tutti", "tuttu">>,
      <<"punk">,      <"arka", "kari">>,
      <<"polvinen">,  <"tuki">>,
      <<"priori">,    <"soida">>,
      <<"pyro">,      <"maa">>,
      <<"pyy", "tie">, <"täi">>,  # Pyy+täisin (pyy + täi + inen), tie+täisin.
      <<"päällys">,   <"tie">>,   # Päällysteinen (päällys + tie + inen).
      <<"rad">,       <"kaali">>,
      <<"rauni">,     <"ottaa">>,      # Rauni+ota
      <<"re">,        <"aktio", "väkä">>,
      <<"rondo">,     <"letto">>,
      <<"rusi">,      <"koi", "noita">>,
      <<"salme">,     <"kivi", "oja", "perä", "suu">>,
      <<"samainen">,  <"tuta">>,
      <<"samu">,      <"raita">>,
      <<"sivula">,    <"usea">>,
      <<"snellman">,  <"laki">>,
      <<"soinen">,    <"aari">>,
      <<"sota", "säihky">, <"väkä">>,
      <<"suo">,       <"musti", "nina">>,
      <<"suu">,       <"tee", "tehdä", "teloa">>,
      <<"sävel">,     <"eittää">>,
      <<"taulu">,     <"koi", "koittaa">>,
      <<"taus">,      <"takki">>,
      <<"tie">,       <"tee", "tie", "toinen", "tokko">>,
      <<"toivo">,     <"malla">>,
      <<"tove">,      <"re", "reisi">>,
      <<"traditio">,  <"naali">>,
      <<"ulko">,      <"naida", "nainen">>,
      <<"uus">,       <"arpoa">>,
      <<"vasta">,     <"pää">>,
      <<"viher">,     <"vuotaa">>,
      <<"viive">,     <"itä">>,
      <<"vik">,       <"koko", "oja", "uros">>,
      <<"voinen">,    <"iva", "ivata">>,    # Voisivatko => vois+iva(ta).
      <<"vyö">,       <"täi">>,             # Vyö+täinen.
      <<"yhtä", "yksi">, <"toinen", "toistaa">>
    >;

    if (yhdyssanataulukko ($vasen.$i.perusmuoto,
                           $oikea.perusmuoto,
                           $taulukko)) then
      return no;
    elseif ($oikea.perusmuoto = "ilta") then
      #
      # Ei muotoja punais+ilta (punainen + ilta).
      #
      if (($vasen.$i.luokka = laatusana) and ($vasen.$i.perusmuoto matches ".*inen")) then
        return no;
      end;
    elseif ($vasen.$i.perusmuoto /= nil) then
      if ((last($vasen.$i.perusmuoto) matches @ääntiö) and
          (first($oikea.perusmuoto) matches @ääntiö)) then
        return (last($vasen.$i.perusmuoto) /= first($oikea.perusmuoto));
      end;
    end;
  end;
  return yes;
end;


subrule yhdyssanataulukko ($eka, $toka, $taulukko):
  foreach $k in $taulukko:
    if (($eka in $k.1) and ($toka in $k.2)) then
      return yes;
    end;
  end;
  return no;
end;


#####################################################


end_rule loppu ($tietue):
  define $i := length ($tietue);
  ? loppu in $tietue.$i.jatko;

#foreach $k in $tietue:
#  define $n := transmit (<"loppu "> + <$k.luokka> + <$k.alku> + <$i.alku>);
#end;
#define $b := transmit ($tietue.<1,tiedot>);
#define $a := transmit ($tietue);

  define $n := $i;
  if ($tietue.$i.luokka in <liitesana, liitesana_s, omistusliite>) then
    $n := $i - 1;
  end;
  if (not (teonsana_ok ($tietue, $n))) then
    stop;
  end;


  define $j := $n;
  repeat while ($tietue.$j.luokka in <sijapääte, omistusliite>);
    $j :=- 1;
  end;


  # Jotkut sanat eivät voi olla yhdyssanan jälkiosana.
  #
  if (($j greater 1) and
      ($tietue.$j.tiedot /= nil) and (ei_ysj in $tietue.$j.tiedot)) then
    stop;
  end;


  # inen-johtimella tehty sana voi olla vain yhdyssanan lopussa,
  # paitsi jos se on merkitty omaksi sanakseen.
  #
  repeat while ($tietue.$j.luokka in @johtimet_nimisana_laatusanasta + @johdin_nimisanasta - <johdin_inen>);
    $j :=- 1;
  end;
  define $k := $j;
  repeat
    if ($tietue.$k.luokka = johdin_inen) then
      if ($k = 2) then
        if (($tietue.($k-1).tiedot /= nil) and (inen in $tietue.($k-1).tiedot)) then
        else
          stop;
        end;
      end;
    end;
    $k :=- 1;
  while ($k greater 1);
  end;



  # Jotkut sanat voivat olla vain yhdyssanojen jälkiosana.
  #
  if ((($tietue.1).tiedot /= nil) and (ysj in ($tietue.1).tiedot)) then
    stop;
  end;


  # Isä-sanan monikon muodot, paitsi nimentö, eivät voi olla yhdyssanan
  # jälkiosana. Esim. valaisin ei ole vala+isin, lukuisiin ei ole luku+isiin,
  # viimeisillään ei ole viime+isillään, mutta kanta+isät on oikein.
  #
  if (($n greater 2) and
      ($tietue.($n-1).perusmuoto = "isä") and
      ($tietue.$n.luokka = sijapääte) and
      ($tietue.$n.luku = monikko) and
      ($tietue.$n.sija /= nimentö_t)) then
    stop;
  end;


  # Ei heitto+is+tu+in eli =heittois=tuki (heitto+inen + tuki).
  #
  if (($n greater 3) and
      ($tietue.($n-1).perusmuoto = "tuki") and
      ($tietue.($n-2).luokka = johdin_inen) and
      ($tietue.$n.luokka = sijapääte) and
      ($tietue.$n.sija = keinonto_in)) then
    stop;
  end;


  # Ei palo+muur+is+ääntö eli =palo=muuris=ääntö (palo + muur+inen + ääntö).
  #
  if (($n greater 2) and
      ($tietue.$n.perusmuoto = "ääntö") and
      ($tietue.($n-1).luokka = johdin_inen)) then
    stop;
  end;


#if (length($tietue) greater 4) then
#  define $foo := no;
#  foreach $k in $tietue:
#    if ($k.luokka = teonsana) then
#      $foo := yes;
#    end;
#  end;
#  if ($foo = yes) then
#    foreach $k in $tietue:
#      define $n := transmit (<$k.alku> + <$k.luokka>);
#    end;
#  end;
#end;

  result $tietue, accept;
end;


# Tarkistetaan, että teonsana on oikein.
#
# Jos yhdyssana loppuu käskytavan yksikön toisen tai kolmannen tekijän
# kestämään [1] ja sanan alkuosa on nimisana, laatusana, etuliite tai
# seikkasana, sana ei ole oikea teonsana, eikä myöskään sana, joka loppuu
# tositavan kestämän tai kertoman yksikon ensimmäiseen tai kolmanteet tekijään,
# tai käskytavan kestämän monikon toiseen kieltomuotoon (esim. älkää äidinkielikö).
#
# [1] Toisen tekijän kestämällä ei ole päätettä, jolla se voitaisiin
#     tunnistaa, vaan se on sama kuin teonsanan vartalo.
#
# Esim. nämä eivät ole oikein:
#    alkuperäisestä -> alku=peräis=estä (alku+peräinen+estää)
#    hairahtaa      -> hai=rahtaa
#    tappion        -> tappi=on (tappi+olla)
#    ensiökäämi, ensiökäämin -> ensiö=käämiä
#    myötätuuli   -> myötä=tuulla
#    äidinkieli   -> äidin=kieliä
#    äidinkielikö -> (älkää) äidin=kielikö
#
subrule teonsana_ok ($tietue, $i):
  if (ok6 ($tietue.$i, teonsana,                käskytapa, kestämä, yksikkö, 2) or
      ok6 ($tietue.$i, teonsana,                tositapa,  kestämä, yksikkö, 3) or
      ok6 ($tietue.$i, kestämän_tekijäpääte_y1, tositapa,  kestämä, yksikkö, 1) or
      ok6 ($tietue.$i, kertoman_tekijäpääte_y1, tositapa,  kertoma, yksikkö, 1) or
      ok6 ($tietue.$i, kertoman_tekijäpääte_y3, tositapa,  kertoma, yksikkö, 3) or
      ok4 ($tietue.$i, käskytapa_kielto,        käskytapa, kestämä)) then
   foreach $k in $tietue:
      if ($k.luokka in @nimisana + <laatusana, seikkasana>
                       + @johdin_teonsanasta) then
        return no;
      end;
      if ($k.luokka = etuliite and not teonsana in $k.jatko) then
        return no;
      end;
    end;
  end;
  return yes;
end;


subrule ok4 ($tietue, $luokka, $tapaluokka, $aikamuoto):
  return (($tietue.luokka = $luokka) and
          ($tietue.tapaluokka = $tapaluokka) and
          ($tietue.aikamuoto = $aikamuoto));
end;


subrule ok6 ($tietue, $luokka, $tapaluokka, $aikamuoto, $luku, $tekijä):
  return (ok4 ($tietue, $luokka, $tapaluokka, $aikamuoto) and
          ($tietue.luku = $luku) and
          ($tietue.tekijä = $tekijä));
end;



output_filter tulosta ($tulos):
  define $tulostus := switch (tulostus);

  define $n := 6; # Oletusarvo.

  if ($tulostus = merkitse_yhdyssanat) then
    if (switch(malli) = voikko) then
      foreach $j in length ($tulos):
        result tulostus_voikko($tulos.$j);
      end;
      stop;
    else
      $n := 7;
    end;
  elseif ($tulostus = koe) then
    $n := 8;
  end;

  if ($n = 5) then
    foreach $j in $tulos:
      foreach $i in $j:
        result <$i.perusmuoto> + <$i.lähtösana>;
      end;
    end;
  elseif ($n = 6) then
    #
    # Tulostetaan sanan perusmuoto.
    #
    foreach $j in $tulos:
      result perusmuoto ($j);
    end;
  elseif ($n = 7) then
    #
    # Tulostetaan sanan perusmuoto.
    #
    foreach $j in $tulos:
      result perusmuoto_yhdyssanan_rajoineen ($j);
    end;
  elseif ($n = 8) then
    #
    # Tulostetaan sanan perusmuoto.
    #
    foreach $j in $tulos:
      result perusmuoto_koe ($j);
    end;
  end;
end;


# Muutetaan sana perusmuotoon: Väisäsillemmekö -> Väisänen.
#
subrule perusmuoto ($tietue):
  define $k := length ($tietue);
  define $luokka := $tietue.$k.luokka;
  define $edellinen_luokka := $luokka;
  define $t := <>;
  define $on_yhdyssana := no;
  define $on_ollut_johdin_UUs := no;

#define $aa := transmit ($tietue);

  # Käydään sana läpi lopusta alkuun ja poistetaan
  # sanan lopussa olevat johtimet.
  #
  repeat
##define $aa := transmit ("foo");
    $luokka := $tietue.$k.luokka;

    if ($on_yhdyssana) then
        $t :=+ <$tietue.$k.alku>;
    elseif ($tietue.$k.luokka = etuliite) then
      $t :=+ <$tietue.$k.alku>;
    elseif ($edellinen_luokka in @johdin + <nimitapa_4>) then
      $t :=+ <$tietue.$k.alku>;
    elseif (not ($luokka in <sijapääte, liitesana, liitesana_s,
                             omistusliite, kaksoispiste,
                             voittoaste, yliaste,
                             liitesana_kä, liitesana_pi, nimitapa_5>
                            + @tositapa + @ehtotapa + @mahtotapa + @käskytapa
                            + @nimitapa_1 + @nimitapa_2 + @nimitapa_3
                            + @laatutapa_1 + @laatutapa_2)) then
      if ($on_ollut_johdin_UUs) then
        $t :=+ <$tietue.$k.alku>;
      else
        $t :=+ <sana1($tietue.$k)>;
      end;
    else
      $t := <"">;
    end;
    $edellinen_luokka := $luokka;
    if ($tietue.$k.luokka in @nimisana
                             + <seikkasana, laatusana,
                                teonsana, lukusana>) then
      $on_yhdyssana := yes;
    end;
    if ($tietue.$k.luokka in <johdin_Us, johdin_UUs>) then
      $on_ollut_johdin_UUs := yes;
    end;
    $k :=- 1;
  while ($k greater 0);
  end;


  # Käännetään tulos oikeinpäin.
  #
  define $s := "";

  $k := length ($t);

  repeat
  while ($k greater 0);
    $s :=+ $t.$k;
    $k :=- 1;
  end;

  return $s;
end;

subrule tulostus_voikko ($tietue):
  define $tuloste := "";
  define $tlen := length($tietue);
  define $tind := 0;
  foreach $t in $tietue:
    $tind :=+ 1;
    if $t.rakenne /= nil then
      $tuloste :=+ $t.rakenne;
    elseif $t.luokka in <nimisana, seikkasana, laatusana, teonsana, lukusana, huudahdussana, sidesana,
                         nimi_laatusana, lukusana, asemosana,
                         etuliite> then
      $tuloste :=+ "=";
      foreach $i in length($t.alku):
        $tuloste :=+ "p";
      end;
    elseif $t.luokka in <etunimi, sukunimi, nimi, paikannimi> then
      $tuloste :=+ "=";
      if ($t.luokka = paikannimi and $tlen greater $tind and $tietue.($tind+1).luokka = johdin_lAinen) then
        foreach $i in length($t.alku):
	  $tuloste :=+ "p";
	end;
      else
        $tuloste :=+ "i";
        foreach $i in length($t.alku) - 1:
          $tuloste :=+ "p";
        end;
      end;
    elseif $t.luokka = lyhenne then
      $tuloste :=+ "=";
      foreach $i in length($t.alku):
        $tuloste :=+ "q";
      end;
    elseif $t.luokka = tavuviiva then
      $tuloste :=+ "-";
    elseif $t.luokka = kaksoispiste then
      $tuloste :=+ ":";
    else
      foreach $i in length($t.alku):
        $tuloste :=+ "p";
      end;
    end;
  end;
  return $tuloste;
end;

subrule perusmuoto_yhdyssanan_rajoineen ($tietue):
  define $k := length ($tietue);
  define $luokka := $tietue.$k.luokka;
  define $edellinen_luokka := $luokka;
  define $t := <>;
  define $on_yhdyssana := no;
  define $on_ollut_johdin_UUs := no;

#define $aa := transmit ($tietue);

  # Käydään sana läpi lopusta alkuun ja poistetaan
  # sanan lopussa olevat johtimet.
  #
  repeat
    $luokka := $tietue.$k.luokka;

    if ($on_yhdyssana) then
      $t :=+ <$tietue.$k.alku>;
      $t :=+ sanan_alkumerkki ($tietue.$k);
    elseif ($tietue.$k.luokka = etuliite) then
      $t :=+ <$tietue.$k.alku>;
    elseif ($edellinen_luokka in @johdin + <nimitapa_4>) then
      $t :=+ <$tietue.$k.alku>;
      $t :=+ sanan_alkumerkki ($tietue.$k);
    elseif (not ($luokka in <sijapääte, liitesana, liitesana_s,
                             omistusliite, kaksoispiste,
                             voittoaste, yliaste,
                             liitesana_kä, liitesana_pi, nimitapa_5>
                            + @tositapa + @ehtotapa + @mahtotapa + @käskytapa
                            + @nimitapa_1 + @nimitapa_2 + @nimitapa_3
                            + @laatutapa_1 + @laatutapa_2)) then
      if ($on_ollut_johdin_UUs) then
        $t :=+ <$tietue.$k.alku>;
      else
        $t :=+ <sana1($tietue.$k)>;
        $t :=+ sanan_alkumerkki ($tietue.$k);
      end;
    else
      $t := <>;
    end;
    $edellinen_luokka := $luokka;
    if ($tietue.$k.luokka in @nimisana
                             + <seikkasana, laatusana,
                                teonsana, lukusana>) then
      $on_yhdyssana := yes;
    end;
    if ($tietue.$k.luokka in <johdin_Us, johdin_UUs>) then
      $on_ollut_johdin_UUs := yes;
    end;
    $k :=- 1;
  while ($k greater 0);
  end;


  # Käännetään tulos oikeinpäin.
  #
  define $s := "";

  $k := length ($t);

  repeat
  while ($k greater 0);
    $s :=+ $t.$k;
    $k :=- 1;
  end;

  return $s;
end;


# Onko sanan alku?
#
subrule sanan_alkumerkki ($tietue):
  if ($tietue.luokka in @nimisana + <laatusana, teonsana>) then
    return <"=">;
  else
    return <>;
  end;
end;


subrule perusmuoto_koe ($tietue):
  define $k := length ($tietue);
  define $luokka := $tietue.$k.luokka;
  define $edellinen_luokka := $luokka;
  define $t := <>;
  define $on_yhdyssana := no;
  define $on_ollut_johdin_UUs := no;

define $aa := transmit ($tietue);

  # Käydään sana läpi lopusta alkuun ja poistetaan
  # sanan lopussa olevat johtimet.
  #
  repeat
##define $aa := transmit ("foo");
    $luokka := $tietue.$k.luokka;

    if ($on_yhdyssana) then
      $t :=+ <"E]">;
      $t :=+ <$tietue.$k.alku>;
      $t :=+ sanan_alkumerkki ($tietue.$k);
      $t :=+ <"[E">;
    elseif ($tietue.$k.luokka = etuliite) then
      $t :=+ <"A]">;
      $t :=+ <$tietue.$k.alku>;
      $t :=+ <"[A">;
    elseif ($edellinen_luokka in @johdin + <nimitapa_4>) then
      $t :=+ <"B]">;
      $t :=+ <$tietue.$k.alku>;
      $t :=+ sanan_alkumerkki ($tietue.$k);
      $t :=+ <"[B">;
    elseif (not ($luokka in <sijapääte, liitesana, liitesana_s,
                             omistusliite, kaksoispiste,
                             voittoaste, yliaste,
                             liitesana_kä, liitesana_pi, nimitapa_5>
                            + @tositapa + @ehtotapa + @mahtotapa + @käskytapa
                            + @nimitapa_1 + @nimitapa_2 + @nimitapa_3
                            + @laatutapa_1 + @laatutapa_2)) then
      if ($on_ollut_johdin_UUs) then
        $t :=+ <"C]">;
        $t :=+ <$tietue.$k.alku>;
        $t :=+ <"[C">;
      else
        $t :=+ <"D]">;
        $t :=+ <sana1($tietue.$k)>;
        $t :=+ sanan_alkumerkki ($tietue.$k);
        $t :=+ <"[D">;
      end;
    else
      $t := <"[Ö]">;
    end;
    $edellinen_luokka := $luokka;
    if ($tietue.$k.luokka in @nimisana
                             + <seikkasana, laatusana,
                                teonsana, lukusana>) then
      $on_yhdyssana := yes;
    end;
    if ($tietue.$k.luokka in <johdin_Us, johdin_UUs>) then
      $on_ollut_johdin_UUs := yes;
    end;
    $k :=- 1;
  while ($k greater 0);
  end;


  # Käännetään tulos oikeinpäin.
  #
  define $s := "";

  $k := length ($t);

  repeat
  while ($k greater 0);
    $s :=+ "+" + $t.$k;
    $k :=- 1;
  end;

  return $s;
end;


# Sanan ensimmäinen kirjain.
# Tekijä: Björn Beutel.
#
subrule first ($string):
  ! $string matches ".": $first, ".*";
  return $first;
end;

pruning_rule prune ($list):
  define $filter := <>;
  foreach $i in length($list):
    $filter :=+ <($i less_equal 20)>;
  end;
  return $filter;
end;

