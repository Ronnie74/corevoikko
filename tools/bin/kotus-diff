#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2007 Harri Pitkänen (hatapitk@iki.fi)
# Search for differences between the XML word list from the
# Research Institute for the Languages of Finland and vocabulary
# database of Joukahainen.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import sys
import locale
import codecs
import xml.parsers.expat
import _pg
import os
import datetime

sys.path.append(os.environ["HOME"] + u"/svn/voikko/trunk/tools/pylib")
HF_DATA = os.environ["HOME"] + u"/svn/voikko/trunk/data"
import hfutils
import hfaffix

kwordlist = {}
current_element = None
current_word = None

def start_element(name, attrs):
	global current_element
	current_element = name
def end_element(name):
	global current_element
	global current_word
	if name == 'st':
		current_element = None
		current_word = None
def char_data(data):
	global current_element
	global current_word
	global kwordlist
	if current_element == 's':
		current_word = data
		if not kwordlist.has_key(current_word): kwordlist[current_word] = []
	elif current_element == 'tn':
		kwordlist[current_word].append(data)

def print_line(word, problem, in_joukahainen = True):
	if in_joukahainen: print '<tr><td><a href="/query/wlist?word=%s">Jouk.</a></td><td>' % word.encode('UTF-8')
	else: print '<tr><td>-</td><td>'
	print word.encode('UTF-8'), '</td><td>', problem.encode('UTF-8')
	print '</td></tr>'

# Returns the inflection class and gradation class for a word in Joukahainen
# Returns tuple (inflclass_main, grad_type) or None, if no inflection was available
def _get_inflection_gradation(db, wid):
        results = db.query(("SELECT value FROM string_attribute_value " +
                            "WHERE wid = %i AND aid = 1") % wid)
        if results.ntuples() != 1: return None
        result = results.getresult()[0]
        infclass_parts = unicode(result[0], 'UTF-8').split('-')
        if len(infclass_parts) == 1:
                infclass_main = unicode(result[0], 'UTF-8')
                grad_type = '-'
        elif len(infclass_parts) == 2:
                infclass_main = infclass_parts[0]
                grad_type = infclass_parts[1]
        else: return None
        return (infclass_main, grad_type)

noun_classes = hfaffix.read_word_classes(HF_DATA + "/subst.aff")
verb_classes = hfaffix.read_word_classes(HF_DATA + "/verb.aff")
# Returns the correct hfutils class structure for given word.
# classid is the word class identifier in Joukahainen.
# Returns None if no class information could be retrieved
def _get_hfutils_class(wid, classid, infclass_main):
	global noun_classes
	global verb_classes
        if classid in [1, 2]: word_classes = noun_classes
        elif classid == 3: word_classes = verb_classes
        else: return None

        for word_class in word_classes:
                if not infclass_main in word_class['smcnames']: continue
                else: return word_class
        return None

def kotus_classes(db, word, classid):
        infclass_parts = _get_inflection_gradation(db, wid)
        if infclass_parts == None: return []
        (infclass_main, grad_type) = infclass_parts

        word_class = _get_hfutils_class(wid, classid, infclass_main)
        if word_class == None: return []
	
	return word_class['cname'].split(',')

def compare_classes(kotus, joukahainen):
	for k in kotus:
		if not k in joukahainen: return False
	return True

# Start of main program

# Set defaults
KOTUS_FILE = u'kotus-sanalista_v1.xml'
IGN_FILE = u'kotus-diff-ignore.txt'

# Read Kotus word list
kotusfile = codecs.open(KOTUS_FILE, 'r', 'UTF-8')
kotusdata = kotusfile.read()
kotusfile.close()

# Initialise the XML parser
parser = xml.parsers.expat.ParserCreate()
parser.StartElementHandler = start_element
parser.EndElementHandler = end_element
parser.CharacterDataHandler = char_data

# Parse the Kotus word list
parser.Parse(kotusdata.encode('UTF-8'))

# Read the list of words to ignore
ignlist = []
ignfile = codecs.open(IGN_FILE, 'r', 'UTF-8')
while True:
	line = ignfile.readline()
	if line == '': break
	if line.find('#') != -1: line = line[:line.find('#')]
	line = line.strip()
	if line != '': ignlist.append(line)
ignfile.close()

# Connect to the database
db = _pg.connect(dbname='joukahainen')

# Get the list of relevant words from Joukahainen
jwordlist = db.query("""
SELECT w.word, w.wid, w.class, s.value FROM word w, string_attribute_value s
WHERE w.wid = s.wid AND s.aid = 1
AND w.wid NOT IN (SELECT f.wid FROM flag_attribute_value f
  WHERE f.aid in (2, 5, 11, 12, 13, 14, 15, 17, 19, 24, 26, 29, 33, 34, 35, 36, 37, 40))
ORDER BY w.word""").getresult()

# Page header
print '<html>'
print '<head>'
print '<title>Joukahaisen ja Kotuksen sanalistan eroja</title>'
print '<meta http-equiv="Content-Type" content="text/html; charset=utf-8">'
print '<style type="text/css"> table, td, th { border: 1px solid black; border-collapse: collapse;} </style>'
print '</head>'
print '<body>'
print '<h1>Kotus-diff %s</h1>' % datetime.datetime.now().isoformat()
print '<table>'
print '<tr><th>Linkit</th><th>Sana</th><th>Eroavuudet</th></tr>'

prev_word = None
inf_classes = []
for (word, wid, classid, infl) in jwordlist:
	word = unicode(word, 'UTF-8')
	if word in ignlist: continue
	if word != prev_word:
		if prev_word == None:
			prev_word = word
			continue
		if prev_word not in kwordlist:
			if u'-' + prev_word in kwordlist:
				if db.query("SELECT count(*) FROM flag_attribute_value WHERE " +
					  "wid=%i AND aid = 29" % wid).getresult()[0][0] == 0:
					print_line(prev_word, u'Kotus: vain yhdyssanan jälkiosana')
			else:
				print_line(prev_word, 'Vain Joukahaisessa')
			prev_word = word
			inf_classes = []
		else:
			if len(kwordlist[prev_word]) > 0 and len(inf_classes) > 0 and \
			   not compare_classes(kwordlist[prev_word], inf_classes):
				print_line(prev_word, 'Kotuksen taivutus %s, Joukahaisen taivutus %s' \
				  % (reduce(lambda x, y: x+','+y, kwordlist[prev_word]), reduce(lambda x, y: x+','+y, inf_classes)))
			inf_classes = []
			prev_word = word
	inf_classes = inf_classes + kotus_classes(db, wid, classid)

#for (word, infl) in kwordlist.iteritems():
#	print word.encode('UTF-8'), '  ', infl

# Page footer
print '</table>'
print '</body>'
print '</html>'
